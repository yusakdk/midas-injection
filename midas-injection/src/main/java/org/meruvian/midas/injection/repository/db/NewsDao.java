package org.meruvian.midas.injection.repository.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import org.meruvian.midas.injection.repository.db.News;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "NEWS".
*/
public class NewsDao extends AbstractDao<News, Long> {

    public static final String TABLENAME = "NEWS";

    /**
     * Properties of entity News.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property DbId = new Property(0, Long.class, "dbId", true, "_id");
        public final static Property DbCreateDate = new Property(1, java.util.Date.class, "dbCreateDate", false, "create_date");
        public final static Property DbUpdateDate = new Property(2, java.util.Date.class, "dbUpdateDate", false, "update_date");
        public final static Property DbCreateBy = new Property(3, String.class, "dbCreateBy", false, "create_by");
        public final static Property DbUpdateBy = new Property(4, String.class, "dbUpdateBy", false, "update_by");
        public final static Property DbActiveFlag = new Property(5, Integer.class, "dbActiveFlag", false, "active_flag");
        public final static Property Id = new Property(6, String.class, "id", false, "ref_id");
        public final static Property RefCreateDate = new Property(7, java.util.Date.class, "refCreateDate", false, "REF_CREATE_DATE");
        public final static Property RefCreateBy = new Property(8, String.class, "refCreateBy", false, "REF_CREATE_BY");
        public final static Property Title = new Property(9, String.class, "title", false, "TITLE");
        public final static Property Content = new Property(10, String.class, "content", false, "CONTENT");
        public final static Property Status = new Property(11, Integer.class, "status", false, "STATUS");
    };


    public NewsDao(DaoConfig config) {
        super(config);
    }
    
    public NewsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"NEWS\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: dbId
                "\"create_date\" INTEGER," + // 1: dbCreateDate
                "\"update_date\" INTEGER," + // 2: dbUpdateDate
                "\"create_by\" TEXT," + // 3: dbCreateBy
                "\"update_by\" TEXT," + // 4: dbUpdateBy
                "\"active_flag\" INTEGER," + // 5: dbActiveFlag
                "\"ref_id\" TEXT," + // 6: id
                "\"REF_CREATE_DATE\" INTEGER," + // 7: refCreateDate
                "\"REF_CREATE_BY\" TEXT," + // 8: refCreateBy
                "\"TITLE\" TEXT," + // 9: title
                "\"CONTENT\" TEXT," + // 10: content
                "\"STATUS\" INTEGER);"); // 11: status
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"NEWS\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, News entity) {
        stmt.clearBindings();
 
        Long dbId = entity.getDbId();
        if (dbId != null) {
            stmt.bindLong(1, dbId);
        }
 
        java.util.Date dbCreateDate = entity.getDbCreateDate();
        if (dbCreateDate != null) {
            stmt.bindLong(2, dbCreateDate.getTime());
        }
 
        java.util.Date dbUpdateDate = entity.getDbUpdateDate();
        if (dbUpdateDate != null) {
            stmt.bindLong(3, dbUpdateDate.getTime());
        }
 
        String dbCreateBy = entity.getDbCreateBy();
        if (dbCreateBy != null) {
            stmt.bindString(4, dbCreateBy);
        }
 
        String dbUpdateBy = entity.getDbUpdateBy();
        if (dbUpdateBy != null) {
            stmt.bindString(5, dbUpdateBy);
        }
 
        Integer dbActiveFlag = entity.getDbActiveFlag();
        if (dbActiveFlag != null) {
            stmt.bindLong(6, dbActiveFlag);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(7, id);
        }
 
        java.util.Date refCreateDate = entity.getRefCreateDate();
        if (refCreateDate != null) {
            stmt.bindLong(8, refCreateDate.getTime());
        }
 
        String refCreateBy = entity.getRefCreateBy();
        if (refCreateBy != null) {
            stmt.bindString(9, refCreateBy);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(10, title);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(11, content);
        }
 
        Integer status = entity.getStatus();
        if (status != null) {
            stmt.bindLong(12, status);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public News readEntity(Cursor cursor, int offset) {
        News entity = new News( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // dbId
            cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)), // dbCreateDate
            cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)), // dbUpdateDate
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // dbCreateBy
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // dbUpdateBy
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // dbActiveFlag
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // id
            cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)), // refCreateDate
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // refCreateBy
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // title
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // content
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11) // status
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, News entity, int offset) {
        entity.setDbId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDbCreateDate(cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)));
        entity.setDbUpdateDate(cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)));
        entity.setDbCreateBy(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDbUpdateBy(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDbActiveFlag(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setId(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setRefCreateDate(cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)));
        entity.setRefCreateBy(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setTitle(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setContent(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setStatus(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(News entity, long rowId) {
        entity.setDbId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(News entity) {
        if(entity != null) {
            return entity.getDbId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
